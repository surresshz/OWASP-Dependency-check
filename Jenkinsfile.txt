node ("$JenkinNodeID") {
  try {
    stage ('Code Checkout') {
      /* groovylint-disable-next-line TrailingComma */
      checkout([
        $class: 'SubversionSCM',
        additionalCredentials: [],
        excludedCommitMessages: '',
        excludedRegions: '',
        excludedRevprop: '',
        excludedUsers: '',
        filterChangelog: false,
        ignoreDirPropChanges: false,
        includedRegions: '',
        locations: [[
          cancelProcessOnExternalsFail: true,
          credentialsId: "$SCM_Cred_ID",
          depthOption: 'infinity',
          ignoreExternalsOption: true,
          local: '.',
          remote: '$SCM_checkout'
        ]],
        quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']
      ])
    }

    def artifact = readMavenPom().getArtifactId()
    def VERSION = readMavenPom().getVersion()
    def packaging = readMavenPom().getPackaging()
    def AppBuildName = "${artifact}" + "." + "${packaging}"
    def ImageName = "${artifact}" + ":" + "latest"
    def ImageNameLw = "${artifact}"
    echo "$ImageNameLw"

    echo "$isUnitTCaseEReq"
    if ("$isUnitTCaseEReq" == 'true') {
      stage('Unit test Case Exec') {
        stageName = 'isUnitTCaseEReportReq'
        sh '. ~/.profile && mvn clean verify $MvnGoal'
      }
    }
    
    echo "$isUnitTCaseEReportReq"
    if ("$isUnitTCaseEReportReq" == 'true') {
      stage('Unit test Case Report Exec') {
        stageName = 'Unit test Case ReportExecution'
        sh 'zip -r $BuildName.zip target/site/jacoco/'
        sh 'curl -v -u "$NexusUserID":"$NexusUserPass" --upload-file $BuildName.zip http://$NexusHost/repository/$ProjectID/QA/UnitTestingCoverageReport/$BuildName.zip'
      }
    }
    
    if ("$isStaticAnalysisReq" == 'true') {
      stage('Static Code Analysis & Coverage Validation') {
        stageName = 'Static Code Analysis'
        withSonarQubeEnv('sonar') {
          sh '''. ~/.profile && mvn sonar:sonar -Dsonar.projectBaseDir=. \
            -Dsonar.projectKey="$sonarprojectName" \
            -Dsonar.projectName="$sonarprojectName" \
            -Dsonar.host.url="$sonarhosturl" \
            -Dsonar.login="$sonarlogin" \
            -Dsonar.password="$sonarpassword" \
            -Dsonar.scm.enabled=true \
            -Dsonar.scm.provider=svn \
            -Dsonar.svn.username="$sonarsvnusername" \
            -Dsonar.svn.password.secured="$sonarsvnpasswordsecured" \
            -Dsonar.exclusions="$sonarexclusions" \
            -Dsonar.test.exclusions="$sonarexclusions" \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.junit.reportsPath=target/surefire-reports \
            -Dsonar.jacoco.reportPath=target/jacoco.exec \
            -Dsonar.cobertura.reportPath=target/site/jacoco/jacoco.xml'''
        }
      }
      
      echo "$CGValidationReq"
      
      if ("$CGValidationReq" == 'true') {
        stage('CGValidation - Cognitive Complexity') {
          def apiResponse = sh(script: """
            curl --location '$sonarhosturl/api/measures/component_tree?component=$sonarprojectName&strategy=leaves&metricKeys=cognitive_complexity&s=metric&metricSort=cognitive_complexity&asc=false&ps=500' \\
              --header 'Authorization: Basic YWRtaW46U29uYXJAQWRtaW4='
          """, returnStdout: true).trim()

          echo "API response: ${apiResponse}"

          def jsonResponse = readJSON(text: apiResponse)
          def cognitiveComplexity = extractCognitiveComplexity(jsonResponse)
          def cognitiveComplexityThreshold = 25

          echo "Cognitive complexity: ${cognitiveComplexity}"

          if (cognitiveComplexity > cognitiveComplexityThreshold) {
            echo "Cognitive complexity exceeded the threshold of ${cognitiveComplexityThreshold}"
            error("Cognitive complexity validation failed")
          }
        }
        
        stage('CGValidation - Cyclomatic Complexity') {
          def apiResponse = sh(script: """
            curl --location '$sonarhosturl/api/measures/component_tree?component=$sonarprojectName&strategy=leaves&metricKeys=complexity&s=metric&metricSort=complexity&asc=false&ps=500' \\
              --header 'Authorization: Basic YWRtaW46U29uYXJAQWRtaW4='
          """, returnStdout: true).trim()

          echo "API response: ${apiResponse}"

          def jsonResponse = readJSON(text: apiResponse)
          def cyclomaticComplexity = extractMetricValue(jsonResponse, "complexity")

          def cyclomaticComplexityThreshold = 25

          echo "Cyclomatic complexity: ${cyclomaticComplexity}"

          if (cyclomaticComplexity > cyclomaticComplexityThreshold) {
            echo "Cyclomatic complexity exceeded the threshold of ${cyclomaticComplexityThreshold}"
            error("Cyclomatic complexity validation failed")
          }
        }
      }
    }
    
	 /** echo"$isQGValidationReq"
        if("$isQGValidationReq" == 'true')	  
      stage ('Quality Gate Validation') {
          stageName = 'Quality Gate'
          def qg = waitForQualityGate()
          timeout(time: 1, unit: 'HOURS') {
            echo '$qg'
            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
        }  **/
	  echo"$isQGValidationReq"
        if("$isQGValidationReq" == 'true')	  
         stage ('Quality Gate Validation') {
          stageName = 'Quality Gate'
          sleep(time: 10, unit: 'SECONDS')
          def status = sh(script: "/opt/QualityGate/qualitygate.sh ${WORKSPACE} $sonarhosturl $sonarlogin $sonarpassword", returnStdout: true).trim()
          echo "Quality Gate Status: $status"
          if (status != 'OK') { 
               echo "Quality Gate Status: Failed"
             error "Pipeline aborted due to quality gate failure: Failed"
          } 
        }
        stage('Dependency-Check') {

            steps {

                script {

                    def dependencyCheckHome = tool 'Dependency-Check'

                    def scanOutputDir = "${env.WORKSPACE}/dependency-check-report"

                    def scanOutputFormat = "HTML"

                    sh "${dependencyCheckHome}/bin/dependency-check.sh --project MyProjectName --scan ${env.WORKSPACE}/opt/jenkins --out ${scanOutputDir} --format ${scanOutputFormat}"

                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: scanOutputDir, reportFiles: 'dependency-check-report.html', reportName: 'Dependency-Check Report'])

                }

            }

        }
        stage ('Application Build Packaging') {
          stageName = 'Application Build Packaging'
          sh '. ~/.profile && mvn clean package -DskipTests=true'
          }
        echo"$isDeploymentReq"
        if("$isDeploymentReq" == 'true')
        {
        stage ('Deployment to QA Environment') {
          stageName = 'Deployment to QA Environment'
          deploy adapters: [tomcat8(credentialsId: "$tomcatToken",
          url: "$tomcatUrl")],
          contextPath: "$contextPath",
          war: '**/*.war'
        }
        }
		echo"$isTestJoBTriggerReq"
        if("$isTestJoBTriggerReq" == 'true')
		stage ('Build TestAutomation JOB') {
          stageName = 'Build TestAutomation JOB'
          build 'Automation'
          }
		  echo"$isTestingReq"
        if("$isTestingReq" == 'true')
		stage ('Intiate TestAutomation') {
          stageName = 'Intiate TestAutomation'
          sh '''
			/usr/bin/ansible-playbook -i $hostspath $ansibleplaybook --e TargetMachine="${TargetMachine}" -e ansible_user="${ansible_user}" -e ansible_password="${ansible_password}" -e Param_config="${Param_config}" -e Param_XVaultToken="${Param_XVaultToken}" -e token="${token}" -e vault_conf="${vault_conf}" -e drive="${drive}" -e testAutomationFramework_Directory="${testAutomationFramework_Directory}" -e Projectcode="${Projectcode}" -e ProjectPlanecode="${ProjectPlanecode}" -e TESTLINK_API_PYTHON_SERVER_URL="${TESTLINK_API_PYTHON_SERVER_URL}" -e TESTLINK_API_PYTHON_DEVKEY="${TESTLINK_API_PYTHON_DEVKEY}" -e jar="${jar}" -e async="${async}" -e poll="${poll} -e Nexusurl="${TestReportNexusurl} -e Product="${Product} -e NexusUser="${NexusUser} -e Password="${Password}" -e Project_Build="${Project_Build}" -vvvv'''
          }
		echo"$isZaPTestReqWithLogin"
        if("$isZaPTestReqWithLogin" == 'true')
		stage ('Intiate Zaptesting') {
          stageName = 'Intiate Zaptesting'
          sh ''' mkdir -p out && \
                    chmod -R 777 out && \
                    docker run -v $(pwd)/out:/zap/wrk/:rw -t owasp/zap2docker-stable \
                    zap-baseline.py -t $Application_BaseUrl \
                    -g gen.conf -d -r zap_scan_report.html --hook=/zap/auth_hook.py \
                    -z "auth.loginurl=$Applicat_authloginurl \
                    auth.username="$Application_authusername" auth.password="$Application_authpassword" auth.auto=1" || error=true '''
          }
		  echo"$isZaPTestReqWithoutLogin"
        if("$isZaPTestReqWithoutLogin" == 'true')
		stage ('Initiate Zaptesting') {
          stageName = 'Initiate Zaptesting'
          sh ''' mkdir -p out && \
                    chmod -R 777 out && \
                    docker run -v $(pwd)/out:/zap/wrk/:rw -t owasp/zap2docker-stable \
                    zap-baseline.py -t $Application_BaseUrl \
                    -g gen.conf -d -r zap_scan_report.html --hook=/zap/auth_hook.py || error=true '''
          }
        if("$NexusRepoReq" == 'true')
              {
        stage ('Update Nexus Repo Latest Snapshot') {
              if("$BuildWithVerNo" == 'true')
              {
              nexustarget = 'http://'+"$NexusUrl"+'/repository/'+"$NexusRepoID"+'/QA/latest/'+"$Artifact_Product"+'/'+"${VERSION}"+'/'+"${AppBuildName}"
              finalOut = 'target/'+"${AppBuildName}"+' '+"${nexustarget}"
              echo "${AppBuildName}"
              echo "${nexustarget}"
              echo "${finalOut}"
              sh 'curl -v -u "$NexusUserID":"$NexusUserPass" --upload-file '+"${finalOut}"
              }
              else
              {
              AppBuildName = "${artifact}"+'.'+"${packaging}"
              nexustarget = 'http://'+"$NexusUrl"+'/repository/'+"$NexusRepoID"+'/QA/latest/'+"$Artifact_Product"+'/'+"${AppBuildName}"
              finalOut = 'target/'+"${AppBuildName}"+' '+"${nexustarget}"
              echo "${AppBuildName}"
              echo "${nexustarget}"
              echo "${finalOut}"
              sh 'curl -v -u "$NexusUserID":"$NexusUserPass" --upload-file '+"${finalOut}"
              }
          }
              }
          if("$isDockerBuildReq" == 'true')
           {
            stage ('DockerBuild') {
            stageName = 'Application Build Packaging'
            sh """docker build \
            -t ${ImageNameLw.toLowerCase()} \
            --no-cache ."""
            }
           }
          if("$isDockerPushReq" == 'true')
           {
             stage ('DockerPush') {
             stageName = 'Application Build Packaging'
             sh """docker login -u $NexusUserID -p $NexusUserPass $NexusUrl && docker tag ${ImageNameLw.toLowerCase()} $NexusUrl/${NexusRepoID.toLowerCase()}/${Artifact_Product.toLowerCase()}/${ImageNameLw.toLowerCase()}:$VERSION && docker push $NexusUrl/${NexusRepoID.toLowerCase()}/${Artifact_Product.toLowerCase()}/${ImageNameLw.toLowerCase()}:$VERSION"""
            }
          }
		  if("$isRolloutReq" == 'true')
           {
             stage ('Kubectl Rollout') {
             stageName = 'Kubectl Rollout'
			 
            // Perform the Kubectl Rollout command to Restart the Pod
            sh """
            /usr/bin/sshpass -p "$remotepassword" ssh $remoteuser@$remotehost "kubectl rollout restart deployment ${deploymentName}"
            """
            }
          }
		 currentBuild.result = 'SUCCESS'
		 stage ('Report success Status into JIRA'){
		  sh '''
		  export ANSIBLE_HOST_KEY_CHECKING=False
		  cd $Notification_Script 
			/usr/bin/ansible-playbook -i hosts site.yml --e smtphost="${smtphost}" -e smtpport="${smtpport}" -e smtpUser="${smtpUser}" -e smtpPass="${smtpPass}" -e to="${API_To}" -e cc="${API_CC}" -e subject="${EmailSubject}" -e body="${Emailmessagebody}" -vvvv'''
		    sh 'curl -v -u $Nexus_Username:$Nexus_Password --upload-file $Zap_Output $Zap_Nexus_Url || error=true'
		  /*	sh '''curl -u admin:TrInItY123 http://192.168.1.143:8081/repository/HKPFSAF/Dev/Automation/sonar-cnes-report-3.2.2.jar -o sonar-cnes-report-3.2.2.jar
                  java -jar $ReportJAR -t $SonarSecID -s $SonarQubeUrl -p $SonarProjectID -r $SonarProjectID.docx 
                  curl -v -u admin:TrInItY123 --upload-file *.docx http://$NexusHost/repository/$ProjectID/Dev/StaticAnalysis/$SonarProjectID.docx''' */
          }

    stage('Finishing: Sit back and Relax') {
      cleanWs() 
    }

  } catch (e) { 
    currentBuild.result = 'FAILURE' 
    Builderror = "${e}"
    
    stage('Report Error Status into JIRA') {
      sh '''
      export ANSIBLE_HOST_KEY_CHECKING=False
      cd $Notification_Script 
      /usr/bin/ansible-playbook -i fail-hosts site.yml --e smtphost="${smtphost}" -e smtpport="${smtpport}" -e smtpUser="${smtpUser}" -e smtpPass="${smtpPass}" -e to="${API_To}" -e cc="${API_CC}" -e subject="${Fail_EmailSubject}" -e body="${Fail_Emailmessagebody}" -vvvv'''
    }
  }
}

def extractCognitiveComplexity(response) {
  def components = response.components

  for (component in components) {
    def measures = component.measures

    for (measure in measures) {
      if (measure.metric == "cognitive_complexity") {
        return measure.value.toInteger()
      }
    }
  }

  error("Cognitive complexity metric not found in API response")
  return 0
}

def extractMetricValue(response, metricKey) {
  def components = response.components

  for (component in components) {
    def measures = component.measures

    for (measure in measures) {
      if (measure.metric == metricKey) {
        return measure.value.toInteger()
      }
    }
  }

  error("Metric '${metricKey}' not found in API response")
  return 0
}

/**
 QualityGate shell script
#!/bin/bash
# Install jq using "sudo apt install jq"

# Set variables
WORKSPACE="$1"
sonarhosturl="$2"
sonarlogin="$3"
sonarpassword="$4"

# Extract ceTaskUrl from report-task.txt
ceTaskUrl=$(grep -oP 'ceTaskUrl=\K.+' "$WORKSPACE/target/sonar/report-task.txt")
#ceTaskUrl=$(grep -oP 'ceTaskUrl=\K.+' "$WORKSPACE/.scannerwork/report-task.txt")
# Extract analysisId
analysis=$(curl -u $sonarlogin:$sonarpassword -s -X GET "$ceTaskUrl" | awk -F'"analysisId":"' '{print $2}' | awk -F'"' '{print $1}')
# Fetch Quality Gate status
status=$(curl -u $sonarlogin:$sonarpassword -s "$sonarhosturl/api/qualitygates/project_status?analysisId=$analysis" | jq -r '.projectStatus.status')
echo "$status"   **/